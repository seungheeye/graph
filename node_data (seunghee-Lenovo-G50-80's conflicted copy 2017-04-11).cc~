#include<vector>
#include<string>
#include <algorithm>
#include "node_data.h"

void node_data::push_back(std::string &timestamp, double &price){
    //TODO make a compare function, make sure this is a "new" data
    timestamps.push_back(timestamp);
    prices.push_back(price);
};

std::vector<std::string> node_data::get_timestamps(int length=-1){
    if (length == -1 || length > timestamps.size()) {length = timestamps.size();}
    std::vector<std::string> ret(timestamps.end() - length, timestamps.end());
    return ret;
};

std::vector<double> node_data::get_prices(int length=-1){
    if (length == -1 || length > prices.size()) {length = prices.size();}
    std::vector<double> ret(prices.end() - length, prices.end());
    return ret;
};

double& node_data::get_price(std::string &timestamp){
    auto it = find(timestamps.begin(), timestamps.end(), timestamp);
    if (it != timestamps.end()){
        return prices[it - timestamps.begin()];
    }else{ return -1;}
};
